{"ast":null,"code":"import ProjectComponent from '@/components/ProjectComponent.vue';\nimport SkillsComponent from '@/components/SkillsComponent.vue';\nimport machineLearningSkillsArray from '@/data/machineLearningSkills';\nexport default {\n  name: \"MachineLearningDomain\",\n  components: {\n    ProjectComponent,\n    SkillsComponent\n  },\n  data() {\n    return {\n      projects: [{\n        title: 'Hallucination Resistant Recommender System',\n        description: 'Designed a multi-stage pipeline leveraging VectorDB for RAG (Retrieval-Augmented Generation) and integrated Lynx model for faithfulness validation, achieving 90% hallucination detection rate and 90% faithfulness accuracy. Implemented iterative prompt rephrasing and multi-query document retrieval, resulting in an 85% rephrase success rate and 87% retrieval accuracy for relevant documents. Enhanced factual accuracy through web search validation, achieving 88% external validation accuracy and an overall 90% factual accuracy for the system’s recommendations.',\n        link: 'https://github.com/dkdal/Hallucination_Resistant_Recommender_System'\n      }, {\n        title: 'Code Refactoring Using Deep Learning',\n        description: 'Built ML pipeline using Numpy, Pytorch, Transformers to refactor magic number and long statement smells using CodeT5. Generated dataset of 13,000 code samples using GitHub SEART, reverse engineering and Refactoring Miner tool. Visualized the results of CodeBLEU, METEOR and ROGUE-Unigram, Bigram, LCS, using Matplotlib',\n        link: 'https://github.com/dkdal/Refactor_Code_Using_Deep_Learning'\n      }, {\n        title: 'Image Generation and ML Analysis on AWS',\n        description: 'Leveraged LLM-based LimeWire API along with AWS Cognito, Lambda, Step Functions, and API Gateway to allow users to generate high-resolution images seamlessly. Integrated AWS Rekognition’s Label Detection and Face Comparison features, enabling users to analyze generated images and compare human face images with reference photos, driving higher user interaction.',\n        link: 'https://github.com/dkdal/Well_Architected_Image_Generation_And_Analysis_On_AWS'\n      }, {\n        title: 'Comparative Analysis of Bank Customer Churn Rate Prediction by Machine Learning Algorithms',\n        description: 'Designed and implemented a machine learning pipeline to analyze over 27,000 customer records using algorithms like SVM, Neural Networks, Naive Bayes, and Logistic Regression.',\n        link: 'https://github.com/dkdal/Bank_Customer_Churn_Rate_Prediction_Using_ML_Algorithms'\n      }],\n      skills: machineLearningSkillsArray\n    };\n  }\n};","map":{"version":3,"names":["ProjectComponent","SkillsComponent","machineLearningSkillsArray","name","components","data","projects","title","description","link","skills"],"sources":["/home/daredevil/Documents/Non Dalhousie Projects/Portfolio/portfolio/src/views/MachineLearningDomain.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n    <h1>MACHINE LEARNING</h1>\n    <section id=\"skills\" class=\"section\">\n      <SkillsComponent :skills=\"skills\" />\n    </section>\n\n    <section id=\"projects\" class=\"section\">\n      <h1>Projects</h1>\n      <div class=\"card-grid\">\n        <ProjectComponent\n          v-for=\"project in projects\"\n          :key=\"project.title\"\n          :title=\"project.title\"\n          :description=\"project.description\"\n          :link=\"project.link\"\n        />\n      </div>\n    </section>\n  </div>\n</template>\n\n<script>\nimport ProjectComponent from '@/components/ProjectComponent.vue';\nimport SkillsComponent from '@/components/SkillsComponent.vue';\nimport machineLearningSkillsArray from '@/data/machineLearningSkills';\n\n  export default {\n    name: \"MachineLearningDomain\",\n    components: {\n      ProjectComponent,\n      SkillsComponent\n    },\n    data() {\n      return {\n        projects: [\n          {\n            title: 'Hallucination Resistant Recommender System',\n            description: 'Designed a multi-stage pipeline leveraging VectorDB for RAG (Retrieval-Augmented Generation) and integrated Lynx model for faithfulness validation, achieving 90% hallucination detection rate and 90% faithfulness accuracy. Implemented iterative prompt rephrasing and multi-query document retrieval, resulting in an 85% rephrase success rate and 87% retrieval accuracy for relevant documents. Enhanced factual accuracy through web search validation, achieving 88% external validation accuracy and an overall 90% factual accuracy for the system’s recommendations.',\n            link: 'https://github.com/dkdal/Hallucination_Resistant_Recommender_System'\n          },\n          {\n            title: 'Code Refactoring Using Deep Learning',\n            description: 'Built ML pipeline using Numpy, Pytorch, Transformers to refactor magic number and long statement smells using CodeT5. Generated dataset of 13,000 code samples using GitHub SEART, reverse engineering and Refactoring Miner tool. Visualized the results of CodeBLEU, METEOR and ROGUE-Unigram, Bigram, LCS, using Matplotlib',\n            link: 'https://github.com/dkdal/Refactor_Code_Using_Deep_Learning'\n          },\n          {\n            title: 'Image Generation and ML Analysis on AWS',\n            description: 'Leveraged LLM-based LimeWire API along with AWS Cognito, Lambda, Step Functions, and API Gateway to allow users to generate high-resolution images seamlessly. Integrated AWS Rekognition’s Label Detection and Face Comparison features, enabling users to analyze generated images and compare human face images with reference photos, driving higher user interaction.',\n            link: 'https://github.com/dkdal/Well_Architected_Image_Generation_And_Analysis_On_AWS'\n          },\n          {\n            title: 'Comparative Analysis of Bank Customer Churn Rate Prediction by Machine Learning Algorithms',\n            description: 'Designed and implemented a machine learning pipeline to analyze over 27,000 customer records using algorithms like SVM, Neural Networks, Naive Bayes, and Logistic Regression.',\n            link: 'https://github.com/dkdal/Bank_Customer_Churn_Rate_Prediction_Using_ML_Algorithms'\n          }\n        ],\n        skills: machineLearningSkillsArray\n      }\n    }\n  };\n</script>\n\n<style scoped>\n  /* Add styles if needed */\n</style>\n  "],"mappings":"AAuBA,OAAOA,gBAAe,MAAO,mCAAmC;AAChE,OAAOC,eAAc,MAAO,kCAAkC;AAC9D,OAAOC,0BAAyB,MAAO,8BAA8B;AAEnE,eAAe;EACbC,IAAI,EAAE,uBAAuB;EAC7BC,UAAU,EAAE;IACVJ,gBAAgB;IAChBC;EACF,CAAC;EACDI,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE,CACR;QACEC,KAAK,EAAE,4CAA4C;QACnDC,WAAW,EAAE,kjBAAkjB;QAC/jBC,IAAI,EAAE;MACR,CAAC,EACD;QACEF,KAAK,EAAE,sCAAsC;QAC7CC,WAAW,EAAE,gUAAgU;QAC7UC,IAAI,EAAE;MACR,CAAC,EACD;QACEF,KAAK,EAAE,yCAAyC;QAChDC,WAAW,EAAE,4WAA4W;QACzXC,IAAI,EAAE;MACR,CAAC,EACD;QACEF,KAAK,EAAE,4FAA4F;QACnGC,WAAW,EAAE,gLAAgL;QAC7LC,IAAI,EAAE;MACR,EACD;MACDC,MAAM,EAAER;IACV;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}